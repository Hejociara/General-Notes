### Variáveis e constantes
int, double, float, char

= símbolo de atribuição

final == constante
Ex:
final Int

_____

System.out.println("Escrever qualquer texto"); = imprima uma linha fora do sistema

concatenar -juntar as partes :

Ex: System.out.println("gato = " + gato);

__________

public static void main (String[]args){
/* Devemos definir variáveis e constantes
// Uma variável em java é definida quando escolhemos
o tipo da variável, depois o nome da variável e em seguida o valor da variável
Ex: int(tipo da variável) raio(nome da variável) = (recebe o valor) 3;
*/
int raio = 3;
// constantes devem levar letras maiúsculas
// colocando a palavra final antes de uma variável, torna-a imutável
EX: final CONSTANTE = 3;
/*

 * Inferência(deduzir, concluir)
 */
    var a = 4.5;
    var c = "Texto";
    System.out.println(c);

    var d = "outro texto"
    System.out.println(d);

/*
 * 8 tipos primitivos: 

 * 6 desses tipos são numéricos

 * Byte(1byte), short(2bytes), int(4bytes) e long(8bytes)-representam valores inteiros

 * Eles possuem valores diferentes de armazenamento mas, todos são inteiros

 * Além disso, temos os números inteiros de pontos flutuantes:

 * Float(4 bytes ou 8 bits) e double (8 bytes)

 * e os outros 2 tipos primitivos são:

 * char e boolean(false and true)

    

 * Conversão de tipos:

 * método: usando notação(ponto)
 */
    String s = "Hello earth world!!!"
    s = s.replace("earth", "Earth")
    }

:::::::::::::::::::::::::::
Notação:

.replace(",","."); //substitui qualquer vírgula pelo ponto
:::::::::::::

String


**Console**:

System.out.print("Algo"); // Imprime na mesma linha

System.out.println("Algo"); //Imprime e dá espaçamento para uma próxima linha

System.out.printf("format, args"); // print formatado

Ex:

System.out.printf("Exemplo: %d %d %d %d, 1,2,3,4"); // print formatado 

%n, dentro do printf, pode realizar uma quebra de linha

:::::::::::

.out = envia para a tela, saída, transmite algo(impressora, monitor,etc)

.in = entrada(teclado,mouse, câmera, etc)

Scanner entrada = new Scanner(System.in); // entrada do sistema, monitorar a entrada

entrada.close();  // para encerrar esse ciclo

::::::::::::::::::::::::::::::

**nextInt()** e **nextDouble()**

Ex:

1. Scanner teclado = new Scanner(System.in);

 

3. System.out.println("Qual a sua idade?");

4. int idade = teclado.nextInt();

5. System.out.println("Qual o seu nome?");

6. string nome = teclado.nextLine();

7. System.out.println("Qual o seu sobrenome?");

8. string sobrenome = teclado.nextLine();

9. 

10. ```
    teclado.close();
    ```

precisamos "pegar" o "\n" que o **nextInt()** não lê. Isso pode ser feito 
colocando um comando **nextLine()** depois do **nextInt()**, 
de modo que o código abaixo vai funcionar da maneira como queríamos.

```
Scanner teclado = new Scanner(System.in); 
System.out.println("Qual a sua idade?");
int idade = teclado.nextInt();
teclado.nextLine() //lê o "\\n" que o teclado.nextInt() deixa para trás.
System.out.println("Qual o seu nome?");
string nome = teclado.nextLine();
System.out.println("Qual o seu sobrenome?");
string sobrenome = teclado.nextLine(); 
teclado.close();
```

Wrapper - classe que envolve um tipo primitivo

Ex: Integer, Character, Byte, Boolean, Byte... 

Conversão explícita - em casos de que vai haver a perda de dados

Conversão implícita - em casos onde não haverá perda de dados

Ex:

double a = 1;

float b = (float) 1.151516; //explícita cast

BigDecimal - usado para quando há a necessidade de precisão

:::::::::::::::::::::
Conversão de String para número
Double.parseDouble //converter para double
Ex: 
double salary1 = Double.parseDouble(value1);

::::::::::

.parseDouble - converter para double

.toString - converter para String

::::::::::::::::::::::::::
Operadores (unários, binários, ternários)
unários a++ / um operando
binários 2 + B // um operando, precisa de um número antes e outro depois
ternários V ? V : V // 3 operandos

Operadores: Aritmético, relacionais, lógicos e atribuição
*operando pré-fixado: ++a /unário
*Operando pós fixado: a++ /unário
*Infixado : 3 + 2 / binário

Módulo é o resto da divisão
Ex:
System.out.println(8 % 3); //8 módulo de 3



unário

a ++; // incremento a = a + 1

a--; // decremento a = a -1

::::::::::::

.equals para comparar strings, evitar utilizar == para a comparação nesses casos

.equals // compara conteúdos

Ex:

System.out.println("2".equals(s)); // compara 2 com a variável s

 

.trim // retira os espaços

Ex:

System.out.println("2".equals(s.trim()); // compara 2 com a variável s



.next // retira os espaços em branco

Ex:

String s2 = entrada.next();

:::::::::::
Elevar a potência 
Math.pow(nome da variável, o número da potência)
Ex:
int a = 3 * 4 - 10;
int b = Math.pow(a,3);

_____________________________________
### JRE(Java Runtime Env) vs JDK (Java Development Kit)
JDK - é utilizado pelo dev // ambiente de desenvolvimento
JRE - é usado pelo usuário / máquina virtual java // ambiente de execução
JVM (Java Virtual Machine)

.java vai ser transformado em .class
aqui estará o ByteCode - não é interpretado pelo computador(windows, linux..)
uma linguagem universal onde quase todas as VM irão rodar e traduzir
para a linguagem de máquina

### Java vs Javac
.java = código fonte
.class = arquivo
javac = java compiler /compilador

_____________

Cast - conversão

Ex:

System.out.println(a / (double) b);

System.out.println(a / (float) b);



Tabela da verdade:

&& (AND)- i comercial

precisa de apenas um falso para constatar que é falso

V && V && V && F -> falso



OU || (OR)

Precisa ter 2 falsos para que o resultado seja falso

V || F -> V

F || F -> F

F || F || F || F || V  -> V



^ ou exclusivo (XOR)

V xor V -> F

V xor F -> V

F xor V -> V

F xor F -> F



NOT V -> F

NOT F -> V

___________________

## Atribuição

```
c += b; // c = c + b;
c -= a; // c = c - a;
c *= b; // c = c * b;
c /= a; // c = c / a;
c %= 2; // c = c % 2; se der 0 o número é par e se der 1, é impar 

c++; // c = c + 1;
```

## Estruturas de controle

Não utilizar ; em estruturas de controle

### Estruturas condicionais: 

if-else, switch-case

Ex: If 

```
if (media <= 10 && media >= 7.0){
    System.out.println("Ha sido aprobado!!!");
    System.out.println("Bien hecho!!!");
}
```

if-else

if(condição)

else {

}



if-else-if

if(nota > 10 || nota <0)

sout("blbla");

else {

if (nota >=6)

sout("blablabla")

}

### Estruturas de repetição:

for, while, do-while

For (estrutura adequada para quantidade determinada de repetições, ou seja,
quantidades pré-definidas)
declaração da variável; expressão que vai dizer se é true or false
e se vai continuar repetindo ou não; manipução da variável para que o Laço
pare de executar em um determinado momento.
Ex:
for 

### Estruturas de exceções:

Try-catch-finally

___________________________________________
if(boolean)
while(boolean)
for(;boolean;)
Ex:
int i = 0;
for(; i < 10; i++){
        System.out.println(i);
}

Laço de repetição infinito:
for(;true;){
    System.out.println("Fin!!!");
}
Ex2:
for(;;){
    System.out.println("Fin!!!");
}
__________
while - enquanto uma determinada expressão for verdadeira vai executar o bloco 
ou sentença 
while - repetição

EX: 
int contador =1 ;
while(contador <= 10){
    sout("Fighting");
    contador++;
}
EX2: 
int contador =1 ;
while(contador <= 10){
    sout("Fighting");
    contador += 2;
}

for é a melhor maneira de utilizar a quantidade determinada de repetições
Ex: 
for (a(inicialização); b(expressão); c(incremento)){
}

EX2: for(int contador = 0; contador <= 20) ; contador +=2){//quantidade determinada de repetções
soutf("i = %d\n",contador);
}

EX3:
for(int contador = 0; contador < 20) ; contador++){
    for(int contador2 = 0; contador <20 ; contador++)
    soutf("[%d %d], contador, contador2);
    }


______________________________

Do-while

do{

}
while(false);
___________________
switch
String gato = "branco"
switch(gato.toLowerCase()){
    case "branco":
    sout("")
    break;

    default:
    sout
}

______________________________
Classes X Objeto
Classe sempre começa com letra maiúscula

EX:
class Nome{

}
A classe tem um corpo que dentro dele possuem(membros):
Atributos -> dados(int, boolean, date, String, Produto...)
Comportamentos -> métodos ()

Uma classe também define um tipo personalizado(estrutura de dados)
Uma classe representa uma abstração(simplificado) A 
A partir das classses criamos objetos, a classe define o tipo e s objetos
representam os dados
Objeto é a mesma coisa que uma instância
Instanciar == Instanciar 10 objetos, criar 10 objetos do tipo produto